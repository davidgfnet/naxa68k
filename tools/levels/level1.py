#!/usr/bin/env python3

# Filename  : level2.py
# Authors   : David Guillen Fandos
# Version   : 0.1
# Date      : August 5, 2019
# Copyright : Public Domain

import os, sys, argparse, hashlib
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))
from common import *

parser = argparse.ArgumentParser(prog='level1')
parser.add_argument('--level', dest='levelfile', required=True, help='Level file (TMX format)')
parser.add_argument('--outfile', dest='outfile', required=True, help='Output file (.c/.h format)')
args = parser.parse_args()

# Produces level1 specifc code to be used to place enemies and objects in grid
tmx = TMXMap(args.levelfile)

# Produce a collision map for the 16x16 tilemap.
outc = open(args.outfile, "w")
outc.write("// Autogenerated from %s by level1.py\n\n" % args.levelfile)
outc.write("//#include <stdint.h>\n\n")
outc.write(tmx.collLayer(tmx._layers["collision"], "colmap"))

# Output the enemies and their attributes
colors = ["red", "blue", "orange", "pink", "pacman"]
moves = ["horizontal", "vertical"]
def pickcol(x, y, attrs):
	if "color" in attrs:
		return colors.index(attrs["color"])
	# Pick a random color based on position, to make it deterministic
	pn = str(x) + "," + str(y)
	choose = 5
	if attrs["type"] == "vertical":
		choose = 4
	return hashlib.sha1(pn.encode("ascii")).digest()[0] % choose

outc.write("\n// Coordinates are pixels divided by 4, scale accordingly! Limits to 1024x1024\n")
outc.write("\nstatic const struct { uint8_t x, y, flags; } enemies_info[] = {\n")
for name, x, y, w, h, attrs in tmx._objgrps["Enemies"]:
	outc.write("  {%d, %d, %d},\n" % ((x + w//2)//4, (y+h//2)//4, pickcol(x, y, attrs) | (moves.index(attrs["type"]) << 3)))
outc.write("};\n")
outc.write("#define ENEMIES_COUNT %d\n\n" % (len(tmx._objgrps["Enemies"])))

outc.close()


